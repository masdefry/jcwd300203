generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("FINPRO_DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Tenant {
  id                 Int        @id @default(autoincrement())
  name               String
  email              String     @unique
  username           String     @unique
  password           String
  profileImage       String?
  IdCardImage        String?
  resetPasswordToken String?    @unique
  tokenExpiry        DateTime?
  role               String     @default("tenant")
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  properties         Property[]
}

model Customer {
  id                 Int       @id @default(autoincrement())
  name               String
  email              String    @unique
  username           String    @unique
  isGoogle           Boolean   @default(false)
  isVerified         Boolean   @default(false)
  profileImage       String?
  resetPasswordToken String?   @unique
  tokenExpiry        DateTime?
  password           String
  role               String    @default("customer")
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  bookings           Booking[]
  reviews            Review[]
}

model Property {
  id           Int             @id @default(autoincrement())
  name         String
  mainImage    String
  address      String
  city         String
  categoryId   Int?
  description  String          @default("No description provided") @db.Text
  roomCapacity Int
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  deletedAt    DateTime?
  tenantId     Int
  bookings     Booking[]
  tenant       Tenant          @relation(fields: [tenantId], references: [id])
  category     Category?       @relation(fields: [categoryId], references: [id])
  images       PropertyImage[]
  facilities   PropFacility[]
  roomTypes    RoomType[]
  reviews      Review[]
}

model Category {
  id   Int    @id @default(autoincrement())
  name String 
  icon String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  properties Property[]

  @@unique([name]) 

}

model PropertyImage {
  id         Int       @id @default(autoincrement())
  url        String
  propertyId Int
  createdAt  DateTime  @default(now())
  deletedAt  DateTime?
  property   Property  @relation(fields: [propertyId], references: [id])
}

model RoomImage {
  id     Int      @id @default(autoincrement())
  url    String
  roomId Int
  room   RoomType @relation(fields: [roomId], references: [id])

  createdAt DateTime  @default(now())
  deletedAt DateTime?
}

model Booking {
  id             Int      @id @default(autoincrement())
  checkInDate    DateTime
  checkOutDate   DateTime
  roomId         Int
  propertyId     Int
  customerId     Int
  room_qty       Int
  proofOfPayment String?
  price          Decimal?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  expiryDate     DateTime @default(dbgenerated("(now() + interval '1 hour')"))
  customer       Customer @relation(fields: [customerId], references: [id])
  property       Property @relation(fields: [propertyId], references: [id])
  room           RoomType @relation(fields: [roomId], references: [id])
  status         Status[]
}

model Status {
  id        Int           @id @default(autoincrement())
  Status    BookingStatus
  bookingId Int
  createdAt DateTime      @default(now())
  booking   Booking       @relation(fields: [bookingId], references: [id])
}

model RoomType {
  id            Int      @id @default(autoincrement())
  name          String
  price         Decimal
  description   String   @db.Text
  qty           Int
  guestCapacity Int 
  propertyId    Int
  property      Property @relation(fields: [propertyId], references: [id])

  images        RoomImage[]
  facilities    RoomFacility[]
  flexiblePrice FlexiblePrice[]
  bookings      Booking[]

  createdAt DateTime  @default(now())
  deletedAt DateTime?
  updatedAt DateTime  @updatedAt
}

model FlexiblePrice {
  id          Int      @id @default(autoincrement())
  roomTypeId  Int
  customDate  DateTime
  customPrice Decimal
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  roomType RoomType @relation(fields: [roomTypeId], references: [id])
}

model PropFacility {
  id   Int     @id @default(autoincrement())
  name String
  icon String?

  Property Property[]
}

model RoomFacility {
  id    Int        @id @default(autoincrement())
  name  String
  icon  String?
  rooms RoomType[]
}

model Review {
  id         Int      @id @default(autoincrement())
  rating     Int
  comment    String
  reply      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  customerId Int
  propertyId Int
  customer   Customer @relation(fields: [customerId], references: [id])
  property   Property @relation(fields: [propertyId], references: [id])

  @@unique([customerId, propertyId]) // Composite unique constraint
}

enum BookingStatus {
  WAITING_FOR_PAYMENT
  WAITING_FOR_CONFIRMATION
  CONFIRMED
  CANCELED
}
