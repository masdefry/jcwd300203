generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("FINPRO_DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Tenant {
  id                 Int        @id @default(autoincrement())
  name               String
  email              String     @unique
  username           String     @unique
  password           String
  profileImage       String?
  IdCardImage        String?
  resetPasswordToken String?    @unique
  tokenExpiry        DateTime?
  role               String     @default("tenant")
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  properties         Property[]
}

model Customer {
  id                 Int       @id @default(autoincrement())
  name               String
  email              String    @unique
  username           String    @unique
  isGoogle           Boolean   @default(false)
  isVerified         Boolean   @default(false)
  profileImage       String?
  resetPasswordToken String?   @unique
  tokenExpiry        DateTime?
  password           String
  role               String    @default("customer")
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  bookings           Booking[]
  reviews            Review[]
}

model Property {
  id           Int                @id @default(autoincrement())
  name         String
  mainImage    String
  address      String
  roomCapacity Int
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  tenantId     Int
  bookings     Booking[]
  tenant       Tenant             @relation(fields: [tenantId], references: [id])
  images       PropertyImage[]
  roomTypes    PropertyRoomType[]
  reviews      Review[]
  facilities   PropFacility[]     @relation("PropFacilityToProperty")
}

model PropertyImage {
  id         Int      @id @default(autoincrement())
  url        String
  propertyId Int
  createdAt  DateTime @default(now())
  property   Property @relation(fields: [propertyId], references: [id])
}

model Room {
  id                 Int              @id @default(autoincrement())
  guestCapacity      Int
  propertyRoomTypeId Int
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  Booking            Booking[]
  propertyRoomType   PropertyRoomType @relation(fields: [propertyRoomTypeId], references: [id])
  images             RoomImage[]
  facilities         RoomFacility[]   @relation("RoomToRoomFacility")
}

model RoomImage {
  id        Int      @id @default(autoincrement())
  url       String
  roomId    Int
  createdAt DateTime @default(now())
  room      Room     @relation(fields: [roomId], references: [id])
}

model Booking {
  id           Int      @id @default(autoincrement())
  checkInDate  DateTime
  checkOutDate DateTime
  roomId       Int
  propertyId   Int
  customerId   Int
  room_qty     Int
  proofOfPayment String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  customer     Customer @relation(fields: [customerId], references: [id])
  property     Property @relation(fields: [propertyId], references: [id])
  room         Room     @relation(fields: [roomId], references: [id])
  status       Status[]
}

model Status {
  id        Int           @id @default(autoincrement())
  Status    BookingStatus
  bookingId Int
  createdAt DateTime      @default(now())
  booking   Booking       @relation(fields: [bookingId], references: [id])
}

model PropertyRoomType {
  id         Int      @id @default(autoincrement())
  name       String
  price      Decimal
  propertyId Int
  qty        Int
  property   Property @relation(fields: [propertyId], references: [id])
  Room       Room[]
}

model PropFacility {
  id         Int        @id @default(autoincrement())
  name       String
  icon       String?
  properties Property[] @relation("PropFacilityToProperty")
}

model RoomFacility {
  id    Int     @id @default(autoincrement())
  name  String
  icon  String?
  rooms Room[]  @relation("RoomToRoomFacility")
}

model Review {
  id         Int      @id @default(autoincrement())
  rating     Int
  comment    String
  createdAt  DateTime @default(now())
  customerId Int
  propertyId Int
  customer   Customer @relation(fields: [customerId], references: [id])
  property   Property @relation(fields: [propertyId], references: [id])
}

enum BookingStatus {
  WAITING_FOR_PAYMENT
  WAITING_FOR_CONFIRMATION
  CONFIRMED
  CANCELED
}
